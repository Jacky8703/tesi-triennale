== Idee <final-ideas>
Terminato il progetto, ho riportato in un documento di relazione richiesto dall'azienda, alcune idee che non sono riuscito a implementare, principalmente per mancanza di tempo, ma che potrebbero essere utili per migliorare l'_API_ e il servizio in generale. \
Le idee sono: \
\
- *Scelta utente* → fornire all'utente che vuole generare gli attributi la possibilità di scegliere tra più di un risultato. L'idea era di generare l'attributo con più modelli e mostrare all'utente tutti i risultati ottenuti, in modo che potesse selezionare il migliore. In questo modo non solo si ha un controllo umano sulla qualità degli attributi generati (sempre utile quando vengono usati modelli AI), ma si possono anche ricavare alcune statistiche sui modelli utilizzati, come, ad esempio, il modello che viene scelto più spesso dagli utenti, a seconda del tipo di attributo o della lingua;
\
- *LLM as a judge* → utilizzare un modello per valutare i risultati. Questo concetto non è stato ideato da me, ma è un sistema già utilizzato e studiato in ambito di _machine learning_ #footnote[https://www.confident-ai.com/blog/why-llm-as-a-judge-is-the-best-llm-evaluation-method (ultima visita 07/07/2025)]. La proposta è quella di utilizzare un ulteriore _LLM_ per valutare la qualità degli attributi generati dai _VLM_ e scegliere il migliore in base ad alcuni criteri prestabiliti (lunghezza, lessico, generalità, ecc.). In questo modo si potrebbe automatizzare la scelta del miglior attributo, senza dover coinvolgere l'utente, ma avendo lo stesso un controllo su ciò che viene generato. \ Ovviamente è un modello che giudica un altro modello, quindi il rischio di errori o allucinazioni è sempre presente, ma si potrebbe comunque ottenere un risultato migliore rispetto a quello ottenuto facendo generare gli attributi ad un singolo _VLM_;
\
- *Few shot* → fornire al modello esempi da seguire. Questa non è una vera e propria idea, ma una tecnica che non ho implementato, che però potrebbe migliorare di molto i risultati generati. La tecnica consiste nel fornire al _VLM_, tramite il _prompt_, alcuni esempi di immagini e relativi attributi, prima della richiesta vera, in modo che apprenda lo stile e lo riporti nei nuovi attributi da generare. \ Il motivo per cui non l'ho implementata è che i contenuti su cui ho lavorato erano molto vari e spaziavano in ambiti totalmente diversi, quindi non sarebbe stato possibile fornire esempi utili per tutti i tipi di contenuti e il rischio era che il modello si confondesse e generasse attributi non pertinenti. Tuttavia, se si limitasse l'ambito di applicazione ad una certa tipologia di contenuti coerenti tra loro, si potrebbe utilizzare questa tecnica e probabilmente ottenere un risultato migliore;
\
- *Attributi del prodotto* → utilizzare gli attributi del prodotto per migliorare la precisione dei risultati. I contenuti che vengono salvati in Thron sono sempre relativi ad un qualche tipo di prodotto o marchio, e anche questi prodotti vengono gestiti dall'azienda, con tutte le informazioni ad essi associate. Queste informazioni potrebbero essere utilizzate per migliorare la generazione degli attributi sui contenuti, ad esempio fornendo al _VLM_ dati sul prodotto associato al contenuto, come il nome, la descrizione, le caratteristiche, ecc. In questo modo si potrebbe ottenere un attributo con informazioni più precise su ciò che viene rappresentato all'interno del contenuto. \ Il rischio è che il modello utilizzi solamente le informazioni fornite e non più l'immagine o il video del contenuto, portando a generare attributi che non sono pertinenti al contenuto stesso, ma che si riferiscono solamente al prodotto associato;
\
- *Ricavare attributi a partire da altri* → utilizzare alcuni attributi generati per ricavare gli altri. L'idea è quella di utilizzare, ad esempio, l'attributo alt e la descrizione di un contenuto per ricavare la lista di _keyword_ tramite _LLM_, per motivi di efficienza e costo. Infatti i modelli processano il testo (_LLM_) più velocemente e con meno costi rispetto alle immagini (_VLM_), quindi si andrebbe a risparmiare tempo e soldi lasciando che alcuni attributi vengano generati non più dal contenuto stesso ma da altri attributi testuali (che si basano su quel contenuto). Volendo si può anche estremizzare questa idea fino a generare solamente la descrizione in base all'immagine o video, e successivamente generare l'alt e le _keyword_ a partire da essa. \ Il problema è che in questo modo si crea un _single point of failure_, in cui se la descrizione non è pertinente o contiene degli errori, probabilmente anche gli altri attributi erediteranno gli stessi errori, portando a risultati non accettabili.